#include "Headers.h"

int main(int argc, char** argv){
	if(argc < 2){
		printf("[+] Usage : Filename.exe [IP] [PORT]\n");
		return -1;
	}
#if defined(_WIN32)
	WSADATA d;
	if(WSAStartup(MAKEWORD(2,2), &d)){
		printf("[-] Failed to initialize Winsock !\n");
		return -1;
	}
#endif
	struct addrinfo hints;
	memset(&hints, 0, sizeof(hints));
	hints.ai_socktype = SOCK_STREAM;
	struct addrinfo* peer_address;
	if(getaddrinfo(argv[1], argv[2] ? argv[2] : "9999", &hints, &peer_address)){
	       printf("[-] getaddrinfo failed !");
	       return -1;
	}
	char address_buffer[100];
	char service_buffer[100];
	printf("[+] Configuring remote address...\n");
	getnameinfo(peer_address->ai_addr, peer_address->ai_addrlen, address_buffer, sizeof(address_buffer), service_buffer, sizeof(service_buffer), NI_NUMERICHOST);
	printf("[+] Remote address is %s\n", address_buffer);
	printf("[+] Remote service is %s\n", service_buffer);
	printf("[+] Creating socket...\n");
	SOCKET socket_peer;
	socket_peer = socket(peer_address->ai_family, peer_address->ai_socktype, peer_address->ai_protocol);
	if(!ISVALIDSOCKET(socket_peer)){
		printf("[-] Socket creation failed...\n");
		return -1;
	}
	printf("[+] Connecting...\n");
	if(connect(socket_peer, peer_address->ai_addr, peer_address->ai_addrlen)){
		printf("[-] Connection to target is impossible !\n");
		return -1;
	}
	freeaddrinfo(peer_address);
	std::string argument;
	printf("[+] Which argument would you like to fuzz ? : ");
	std::getline(std::cin >> std::ws, argument);
	int bytesMultiplicator = {0};
	printf("[+] How much bytes would you like to send for each letters (A/B/C) [ANSWER EXAMPLE : 500] : ");
	std::cin >> bytesMultiplicator;
	size_t bytesMultiplier = bytesMultiplicator;
	char Abuffer = {'A'};
	char Bbuffer = {'B'};
	char Cbuffer = {'C'};
	std::string ABuffer(bytesMultiplier, Abuffer);
	std::string BBuffer(bytesMultiplier, Bbuffer);
	std::string CBuffer(bytesMultiplier, Cbuffer);
	std::string finalBuffer = (argument != "" ? argument : "") + (argument != "" ? " " : "") + ABuffer + BBuffer + CBuffer;
	std::cout<<finalBuffer<<std::endl;
	char *exploitBuffer = new char[finalBuffer.size() + 1];
	std::copy(finalBuffer.begin(), finalBuffer.end(), exploitBuffer);
	exploitBuffer[finalBuffer.size()] = '\0';
	int sendExploit = send(socket_peer, exploitBuffer, finalBuffer.size() + 1, 0);
	char read[4096];
	/*int bytesReceived = recv(socket_peer, read, 4096, 0);
	if(bytesReceived < 1){
		printf("[+] Connection closed by target !");
		return 0;
	}*/
	CLOSESOCKET(socket_peer);
	printf("[+] Done !\n");
}

